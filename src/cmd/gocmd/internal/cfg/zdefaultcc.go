// Code generated by go tool dist; DO NOT EDIT.

package cfg

const DefaultPkgConfig = `pkg-config`

func DefaultCC(goos, goarch string) string {
	switch goos + `/` + goarch {
	case "linux/amd64":
		return "gcc"

	case "darwin/amd64":
		return "clang"

	case "darwin/arm64":
		return "clang"

	case "freebsd/386":
		return "clang"

	case "freebsd/amd64":
		return "clang"

	case "linux/386":
		return "gcc"

	case "linux/arm64":
		return "gcc"

	case "linux/armv6l":
		return "gcc"

	case "linux/ppc64le":
		return "gcc"

	case "linux/s390x":
		return "s390x-linux-gnu-gcc"

	case "windows/386":
		return "gcc"

	case "windows/amd64":
		return "gcc"

	case "windows/arm64":
		return "gcc"

	case "js/wasm":
		return "gcc"
	}
	panic("gocompiler: unknown platform " + goos + `/` + goarch)
}
func DefaultCXX(goos, goarch string) string {
	switch goos + `/` + goarch {
	case "linux/amd64":
		return "g++"

	case "darwin/amd64":
		return "clang++"

	case "darwin/arm64":
		return "clang++"

	case "freebsd/386":
		return "clang++"

	case "freebsd/amd64":
		return "clang++"

	case "linux/386":
		return "g++"

	case "linux/arm64":
		return "g++"

	case "linux/armv6l":
		return "g++"

	case "linux/ppc64le":
		return "g++"

	case "linux/s390x":
		return "g++"

	case "windows/386":
		return "g++"

	case "windows/amd64":
		return "g++"

	case "windows/arm64":
		return "g++"

	case "js/wasm":
		return "g++"
	}
	panic("gocompiler: unknown platform " + goos + `/` + goarch)
}

//gocompiler patch
